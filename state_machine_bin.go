// Code generated by go-bindata.
// sources:
// schemas/state-machine.json
// DO NOT EDIT!

package aslparser

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasStateMachineJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x21\xa8\x79\x48\x1a\x3b\x4e\xf6\xb2\xd5\x2f\x83\x9b\x65\x5b\x81\xa6\x09\x1a\xa3\x03\x96\xba\xc3\x45\x3e\xc7\x6c\x24\x4a\x25\xa9\x35\x59\xeb\xff\x7d\xd0\x87\x15\x51\x22\x65\x99\x52\x63\x23\x50\x81\x02\x02\x79\x5f\xbc\x8f\xdf\x1d\x2d\xe5\x5b\xcf\xb2\xec\x3d\x32\xb3\x47\x96\xfd\x82\x0b\x10\x38\xf0\xc0\x59\x10\x8a\x76\x3f\xde\xe2\xce\x02\x3d\x88\xb6\x17\x42\x04\xa3\xe1\xf0\x33\xf7\xe9\x20\x59\x3d\xf2\xd9\xed\x70\xc6\x60\x2e\x06\xc7\x3f\x0f\x93\xb5\x17\x09\x9f\x78\x08\x30\x62\xf2\x6f\x3e\xa3\x23\x92\xb5\x80\xf9\x01\x32\x41\x90\xdb\x23\x2b\x52\x6c\x59\xf6\xa9\xef\x79\x48\x45\xb6\x90\x63\xe5\x82\x11\x7a\x6b\xc7\xcb\xcb\x7e\x42\x7e\x25\x80\x89\xf1\x26\xe4\x22\xa7\x4d\x6d\x57\xbc\x1e\x80\x10\xc8\xe8\x65\xd9\xc4\x78\xfb\xd3\xd1\xb7\x93\xfe\xc9\x4f\xbf\x2c\xf7\xa4\xf5\xc8\x41\x0c\xe7\xb1\xf3\x86\x33\x9c\x13\x4a\x04\xf1\x29\x1f\xc6\x9e\xb4\x33\xba\x65\xfa\xb4\xcc\xf4\xc1\x6c\x16\x93\x82\x2b\xa9\x9c\x83\xcb\x51\x3a\xc2\x07\x64\x9c\xf8\xb4\xee\x89\x27\xc4\x43\x3f\x14\x57\xe8\xf8\x74\xa6\x3c\x39\xa1\x02\x6f\x91\x3d\x1e\xdd\x23\x94\x78\xa1\x67\x8f\xac\xe3\xde\xca\xd8\x58\x5c\xa5\x91\x31\x01\xc3\x2f\x21\x61\x18\x65\xcf\xb5\x1c\x20\x39\x00\x3d\xcb\x9a\xc6\x0c\x39\x1f\x3d\xe6\x40\xe2\xac\x1a\x41\xf2\x29\x5e\xcc\x33\x5d\xd1\xbf\x1a\xa1\x70\x16\x3e\x71\xf2\xb1\xe8\x6f\xc2\x3d\x07\xe2\x9a\xf2\x06\xc0\xc0\x75\xb1\x01\x3f\xe7\xa6\xbc\x3c\x74\x1c\xc4\x99\x29\xbb\x00\x7e\x67\xca\xfb\x15\x88\x30\xe5\xf5\x20\x28\x57\xcd\x54\xca\xf0\x34\x9e\xa3\xf5\x25\xad\xa9\xe5\x49\x42\x2f\x59\x53\x28\xa9\x7e\x7e\x2f\x85\x86\x68\xfb\xd3\x69\xac\x7c\x4f\x79\x3c\xfb\x1d\xde\x8b\x35\x82\x95\x7c\x67\x74\x56\x64\x43\x1a\x17\xe4\xb5\x60\x21\x4e\x95\x4c\x65\xe0\xac\xad\xef\x22\x14\x41\x28\x2e\x41\x2c\x34\xdc\xd7\x99\x1f\x2c\x9b\x86\xae\x6b\xab\x4d\x78\x43\x5b\x11\x93\xf8\x94\xeb\x4e\x02\x8c\xc1\x83\x1c\x11\x22\xd0\x2b\xd2\x6b\x53\xea\x22\x40\x06\xc2\x67\x76\x8e\x78\xa9\x34\xe4\x37\x9c\x43\xe8\xd6\x77\x69\x09\xd4\xf3\x70\x98\xa4\x59\xff\xf1\x78\xd3\xcd\xb1\x3f\x06\x9f\xed\x24\xfa\xef\x40\x5c\x4d\x9a\x3f\xa3\xcc\x83\x90\xaf\xf3\x90\xba\x62\x19\xf3\x59\x9b\x79\x62\x90\x1c\x11\x54\x6e\x27\x37\xce\x21\xe8\x10\xd0\x6a\x31\x0f\xdf\x23\x0f\xdd\x36\xcc\x89\x70\xb1\xb9\x98\x73\xb8\x3f\xf5\xa9\x13\x32\x86\xd4\x79\xd0\xf9\x97\x86\xde\x4d\x6e\x8c\xb4\x54\xa3\xa4\xc2\xc0\x04\x8b\x75\x43\xb4\x7c\x03\x51\xca\xb8\x04\x06\x1e\x0a\x64\xda\x8e\x91\xd6\x80\xc6\xd5\x82\x69\x8f\x54\xbf\xd5\x44\x1c\x5c\x51\x6f\xe9\xb6\xa6\xea\xd2\xdd\x18\x3d\xce\xbe\x84\xe0\xaa\xb6\x2b\xed\xa9\xb4\xaa\x68\x5b\xb1\x02\x32\x7f\x14\x56\x96\x45\x0d\xf6\x1b\x2a\x90\xfd\x0b\x6e\xf9\x1a\xa1\xb0\x52\x91\x08\x29\x85\x2a\x1d\x74\x2a\xcf\xe1\x7e\x2c\x04\x7a\x81\x78\x12\x75\xaf\xc1\xb9\xf3\xe7\xf3\xf7\xf2\xcd\xa3\x2d\x75\xbd\x0a\xe5\x32\xfa\xe7\x73\x61\xba\x76\x42\x39\x05\xe1\xe8\x8a\xbb\xcb\xde\x95\x08\x45\x17\x2a\x98\xa6\x96\x6d\x18\xb6\x7e\xaa\x51\x13\xbe\x52\xf7\xcf\x6e\xb1\xb9\x76\x2c\x09\x97\xa4\x2d\xfb\x96\x8e\x2e\xea\x9a\x19\xd9\xb4\x7a\x0a\xcd\x90\xd7\x60\xd2\xc8\xee\xb1\xdb\x19\x37\x2e\x53\xf5\xdd\xcc\x61\xed\xe0\xcc\xf1\x9a\x01\x75\x16\x6d\x5c\xdf\x56\x95\x5f\x42\x9c\x75\xd3\x81\x55\xa8\x5d\x35\x76\x76\x9d\xbf\xeb\xfc\x5d\xe7\x7f\xde\xd9\xdb\x75\xfe\x72\xe7\xcf\x00\xda\xa8\xf3\x73\xbe\xb5\xae\xcf\x79\xd7\xf1\xad\xa7\xec\xf8\x95\x87\x69\x7a\xed\xe6\xe9\x2f\xab\xbb\x50\x15\x06\x95\xb0\x7a\x9f\xb2\x9d\x62\xb8\x4a\xb4\xb7\xf4\x83\x6c\x29\x02\xad\x78\x28\x7e\x65\xb4\x1d\xf7\x4c\x80\xdf\x75\x58\x61\xb5\x8b\x15\x7e\xc8\x9c\x52\x44\x14\xb5\xba\x2e\x52\x85\x58\x01\xa3\x23\xf8\xca\x47\xfb\xd7\x30\xf8\x6f\xfa\x7d\x70\x70\xb8\x7a\xbc\x3e\x1e\xbc\x8a\x16\x5e\x8e\xe2\xa7\x97\x79\x92\xe8\x69\x3c\xf8\xfb\x78\xf0\x6a\xf0\xcf\xd1\xf4\x70\x7f\xb4\xff\xf1\xe3\xde\xdb\xf1\xe4\xec\x6a\xf2\x3d\xbf\x37\x3d\x3c\x38\xf8\x75\x4f\x7a\xd5\xd3\x57\xcd\x40\x2a\xbc\x8a\x40\xc3\x0c\x38\x6b\x3b\xb5\xbb\x81\x74\x37\x90\xee\x06\xf2\x9c\xb3\x77\xb7\x6e\x20\xb9\xf0\x69\x3f\x0c\xb2\xd6\x64\x5c\x2e\xd7\x4e\x94\x92\xff\x44\x60\xe2\x06\xe1\x47\xc8\x36\x98\x3a\x77\x60\xbe\xec\xe7\x1a\xa8\xc1\x24\x15\x7f\x40\xb3\x9d\x49\xea\x2f\x20\xa2\x9b\xa4\xac\x16\x27\xa9\x46\x45\xa1\x7e\x8b\x1a\x95\x32\x17\xe0\x05\x26\xee\x49\xed\x69\x7e\xb0\xcc\x0a\x43\x51\x3b\x50\xa7\x06\xb5\x99\x7d\x4d\x54\xe7\x9b\x52\x4d\x81\x7e\x00\x46\xe0\xc6\x35\xfa\xf2\xc4\xb4\x0a\xc7\xe5\x2a\x7c\xfa\x0f\xac\x2e\xb4\xdf\xcc\x3c\x9d\x0d\xef\xfc\x92\xff\xea\x8a\x94\x5e\x7b\xf8\xbe\x8b\x40\x95\xb3\x48\x76\xaa\x9b\x84\x48\x13\xc9\xd0\x43\x46\x9c\x6a\x09\x29\x3c\x54\x09\xf8\x83\x21\x08\x64\x93\x05\xd0\x76\xa4\x34\xb6\xe8\x2d\x72\xde\xd0\x9c\x95\x08\x73\x5b\xae\xe2\x62\xa8\xe6\xaf\xc4\xc9\x78\xaf\x86\x73\x37\x12\xd2\xd4\x9e\x75\xae\xad\x2f\xc1\xdc\x92\x0c\xf8\x5b\x10\xd1\xd0\xbf\x2a\x39\x2d\x58\xd5\xc4\xcb\x25\x21\x1b\xda\xb3\x79\x5b\x1c\xe7\xdb\xdd\xa3\x25\x92\x3a\x89\x41\xc6\x2e\x65\x77\xd7\x33\x47\xf8\xb9\x29\x8b\x84\x74\x66\xcc\xf9\x44\x69\x2c\xa1\x91\x25\x59\x72\x34\x63\x37\xb3\xe1\x82\x6d\xca\x21\xe1\xa0\x11\x6f\x03\xd7\xeb\xf0\xcf\x48\x8c\xa9\xe3\x95\xb8\xb7\xa1\x8c\x22\xe6\x99\xb2\x37\xf0\x65\x05\xd6\x99\x4a\x32\xf5\xa8\x0e\xe3\xca\xd3\x7d\xfa\xa7\x1b\xbd\xe8\xff\xb2\xf7\x7f\x00\x00\x00\xff\xff\x4e\x80\xd7\x4e\x6d\x36\x00\x00")

func schemasStateMachineJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasStateMachineJson,
		"schemas/state-machine.json",
	)
}

func schemasStateMachineJson() (*asset, error) {
	bytes, err := schemasStateMachineJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/state-machine.json", size: 13933, mode: os.FileMode(493), modTime: time.Unix(1587363797, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/state-machine.json": schemasStateMachineJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"state-machine.json": &bintree{schemasStateMachineJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

